{"version":3,"file":"password-strength.umd.min.js","sources":["../../tmp/module/enum/criteria.enum.ts","../../tmp/module/enum/colors.enum.ts","../../tmp/module/validator/mat-password-strength-validator.ts","../../tmp/module/validator/regexp.class.ts","../../tmp/module/component/mat-password-strength/mat-password-strength.component.ts","../../tmp/module/animations/index.ts","../../tmp/module/component/mat-password-strength-info/mat-password-strength-info.component.ts","../../tmp/module/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.ts","../../tmp/module/mat-password-strength.module.ts"],"sourcesContent":["export enum Criteria {\n  at_least_eight_chars = 'minChar',\n  at_least_one_lower_case_char = 'lowerCase',\n  at_least_one_upper_case_char = 'upperCase',\n  at_least_one_digit_char = 'digit',\n  at_least_one_special_char = ' specialChar',\n  at_custom_chars = 'customChars'\n}\n","export enum Colors {\n  primary = 'primary',\n  accent = 'accent',\n  warn = 'warn'\n}\n","import {AbstractControl, ValidatorFn} from '@angular/forms';\n\nexport class MatPasswordStrengthValidator {\n\n  isUndefinedOrEmpty(control: AbstractControl): any | undefined {\n    if (!control || !control.value || control.value.length === 0) {\n      return undefined;\n    }\n  }\n\n  validate(criteria: string, regex: RegExp): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (!regex.test(control.value)) {\n        const failed = {};\n        failed[criteria] = {\n          actualValue: control.value,\n          requiredPattern: regex\n        };\n        return failed;\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  confirm(password: string): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (control.value !== password) {\n        return {\n          notConfirmed: {\n            password: password,\n            passwordConfirmation: control.value\n          }\n        }\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n}\n","export const RegExpValidator = {\n  'lowerCase': RegExp(/^(?=.*?[a-z])/),\n  'upperCase': RegExp(/^(?=.*?[A-Z])/),\n  'digit': RegExp(/^(?=.*?[0-9])/),\n  'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {FormControl, ValidatorFn, Validators} from '@angular/forms';\nimport {ThemePalette} from '@angular/material';\nimport {Criteria} from '../../enum/criteria.enum';\nimport {Colors} from '../../enum/colors.enum';\nimport {MatPasswordStrengthValidator} from '../../validator/mat-password-strength-validator';\nimport {RegExpValidator} from '../../validator/regexp.class';\n\n\n@Component({\n  selector: 'mat-password-strength',\n  exportAs: 'matPasswordStrength',\n  template: `\n    <mat-progress-bar mode=\"determinate\"\n                      [color]=\"color\"\n                      [value]=\"strength\">\n    </mat-progress-bar>\n  `,\n  styles: [`\n    .green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatPasswordStrengthComponent implements OnInit, OnChanges {\n\n  @Input() password: string;\n  @Input() externalError: boolean;\n\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n\n  @Input() min = 8;\n  @Input() max = 30;\n  @Input() customValidator: RegExp;\n\n  @Input() warnThreshold = 21;\n  @Input() accentThreshold = 81;\n\n  @Output()\n  onStrengthChanged: EventEmitter<number> = new EventEmitter();\n\n  criteriaMap = new Map<Criteria, RegExp>();\n\n  containAtLeastMinChars: boolean;\n  containAtLeastOneLowerCaseLetter: boolean;\n  containAtLeastOneUpperCaseLetter: boolean;\n  containAtLeastOneDigit: boolean;\n  containAtLeastOneSpecialChar: boolean;\n  containAtCustomChars: boolean;\n\n  // TO ACCESS VIA CONTENT CHILD\n  passwordFormControl: FormControl = new FormControl();\n  passwordConfirmationFormControl: FormControl = new FormControl();\n\n  validatorsArray: ValidatorFn[] = [];\n\n  private _strength = 0;\n  private _color: ThemePalette;\n\n  Validators: ValidatorFn;\n  matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n\n  ngOnInit(): void {\n    this.setRulesAndValidators();\n\n    if (this.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n      this.calculatePasswordStrength();\n    } else {\n      this.password && this.password.length > 0 ?\n        this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  get strength(): number {\n    return this._strength ? this._strength : 0;\n  }\n\n  get color(): ThemePalette {\n\n    if (this._strength < this.warnThreshold) {\n      return Colors.warn;\n    } else if (this._strength < this.accentThreshold) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  private _containAtLeastMinChars(): boolean {\n    this.containAtLeastMinChars = this.password.length >= this.min;\n    return this.containAtLeastMinChars;\n  }\n\n  private _containAtLeastOneLowerCaseLetter(): boolean {\n    this.containAtLeastOneLowerCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_lower_case_char)\n        .test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  private _containAtLeastOneUpperCaseLetter(): boolean {\n    this.containAtLeastOneUpperCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_upper_case_char)\n        .test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  private _containAtLeastOneDigit(): boolean {\n    this.containAtLeastOneDigit =\n      this.criteriaMap\n        .get(Criteria.at_least_one_digit_char)\n        .test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  private _containAtLeastOneSpecialChar(): boolean {\n    this.containAtLeastOneSpecialChar =\n      this.criteriaMap\n        .get(Criteria.at_least_one_special_char)\n        .test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  private _containCustomChars(): boolean {\n    this.containAtCustomChars =\n      this.criteriaMap\n        .get(Criteria.at_custom_chars)\n        .test(this.password);\n    return this.containAtCustomChars;\n  }\n\n  parseCustomValidatorsRegex(value: string | RegExp = this.customValidator) {\n    if (this.customValidator instanceof RegExp) {\n      return this.customValidator;\n    } else if (typeof this.customValidator === 'string') {\n      return RegExp(this.customValidator);\n    }\n  }\n\n  setRulesAndValidators(): void {\n    this.validatorsArray = [];\n    this.criteriaMap = new Map<Criteria, RegExp>();\n    this.passwordConfirmationFormControl\n      .setValidators(Validators.compose([\n        Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n      ]));\n    this.validatorsArray.push(Validators.required);\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n      this.validatorsArray.push(Validators.minLength(this.min));\n      this.validatorsArray.push(Validators.maxLength(this.max));\n    }\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase))\n    }\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase))\n    }\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.digit))\n    }\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar))\n    }\n    if (this.customValidator) {\n      this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n      this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()))\n    }\n\n    this.criteriaMap.forEach((value: any, key: string) => {\n      this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n    });\n\n    this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n    this.Validators = Validators.compose([...this.validatorsArray]);\n\n  }\n\n  calculatePasswordStrength(): void {\n    const requirements: Array<boolean> = [];\n    const unit = 100 / this.criteriaMap.size;\n\n    // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(\n      this.enableLengthRule ? this._containAtLeastMinChars() : false,\n      this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false,\n      this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false,\n      this.enableDigitRule ? this._containAtLeastOneDigit() : false,\n      this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false,\n      this.customValidator ? this._containCustomChars() : false\n    );\n\n    this._strength = requirements.filter(v => v).length * unit;\n    // console.log('length = ', this._strength / unit);\n    this.onStrengthChanged.emit(this.strength);\n    this.setRulesAndValidators();\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastMinChars =\n      this.containAtLeastOneLowerCaseLetter =\n        this.containAtLeastOneUpperCaseLetter =\n          this.containAtLeastOneDigit =\n            this.containAtCustomChars =\n              this.containAtLeastOneSpecialChar = false;\n  }\n}\n","import {animate, animation, AnimationReferenceMetadata, keyframes, style} from '@angular/animations';\n\nexport function flipIn(timing: number, rotateX: number, rotateY: number): AnimationReferenceMetadata {\n  const params = {timing: timing, delay: 0, rotateX, rotateY};\n\n  return animation(\n    [\n      style({'backface-visibility': 'visible'}),\n      animate(\n        '{{ timing }}s {{ delay }}s ease-in',\n        keyframes([\n          style({\n            opacity: 0,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n            offset: 0,\n          }),\n          style({\n            opacity: 1,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n            offset: 0.4,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n            offset: 0.6,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n            offset: 0.8,\n          }),\n          style({\n            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n            offset: 1,\n          }),\n        ])\n      ),\n    ],\n    {params}\n  );\n}\n\nexport const flipInX = flipIn(1, 1, 0);\nexport const flipInY = flipIn(1, 0, 1);\n\nexport const shake = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({transform: 'translate3d(0, 0, 0)', offset: 0}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.1}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.2}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.3}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.4}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.5}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.6}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.7}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.8}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.9}),\n      style({transform: 'translate3d(0, 0, 0)', offset: 1}),\n    ])\n  ),\n  {params: {timing: 1, delay: 0}}\n);\n","import {Component, Input, OnInit} from '@angular/core';\nimport {MatPasswordStrengthComponent} from '../mat-password-strength/mat-password-strength.component';\nimport {animate, animateChild, keyframes, query, stagger, style, transition, trigger, useAnimation} from '@angular/animations';\nimport {shake} from '../../animations/index';\n\n@Component({\n  selector: 'mat-password-strength-info',\n  exportAs: 'matPasswordStrengthInfo',\n  template: `\n    <mat-card @list>\n      <mat-card-content>\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLowerCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\" @flipY>\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{lowerCaseCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableUpperCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{upperCaseCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableDigitRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneDigit; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{digitsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableSpecialCharRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneSpecialChar; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{specialCharsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLengthRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastMinChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{minCharsCriteriaMsg}}</span>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.customValidator\">\n          <div *ngIf=\"passwordComponent.containAtCustomChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>{{customCharsCriteriaMsg}}</span>\n        </div>\n\n        <div *ngIf=\"enableScoreInfo\" class=\"info-row\" @items>\n          <div *ngIf=\"passwordComponent.strength === 100; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <span>Password's strength = {{passwordComponent.strength}} %100</span>\n        </div>\n\n      </mat-card-content>\n    </mat-card>\n  `,\n  styles: [`\n    mat-card{flex-direction:row;place-content:stretch center;flex:1 1 0}mat-card,mat-card mat-card-content{box-sizing:border-box;display:flex;align-items:stretch}mat-card mat-card-content{flex-direction:column;max-width:100%;place-content:stretch flex-start}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\n  `],\n  animations: [\n    // nice stagger effect when showing existing elements\n    trigger('list', [\n      transition(':enter', [\n        // child animation selector + stagger\n        query('@items',\n          stagger(300, animateChild())\n        )\n      ]),\n    ]),\n    trigger('items', [\n      // cubic-bezier for a tiny bouncing feel\n      transition(':enter', [\n        style({transform: 'scale(0.5)', opacity: 0}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(1)', opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'scale(1)', opacity: 1, height: '*'}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px'}))\n      ]),\n    ]),\n    trigger('positiveState', [\n      transition(':enter', [\n        style({'backface-visibility': 'visible'}),\n        animate(\n          '{{ timing }}s {{ delay }}s ease-in',\n          keyframes([\n            style({\n              opacity: 0,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n              offset: 0,\n            }),\n            style({\n              opacity: 1,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n              offset: 0.4,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n              offset: 0.6,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n              offset: 0.8,\n            }),\n            style({\n              transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n              offset: 1,\n            }),\n          ])\n        ),\n      ], {params: {timing: 1, delay: 0, rotateX: 1, rotateY: 0}}),\n    ]),\n    trigger('negativeState', [\n      transition(':enter', useAnimation(shake)),\n    ]),\n  ],\n})\nexport class MatPasswordStrengthInfoComponent implements OnInit {\n\n  @Input()\n  passwordComponent: MatPasswordStrengthComponent;\n\n  @Input()\n  enableScoreInfo = false;\n\n  @Input()\n  lowerCaseCriteriaMsg = 'contains at least one lower character';\n\n  @Input()\n  upperCaseCriteriaMsg = 'contains at least one upper character';\n\n  @Input()\n  digitsCriteriaMsg = 'contains at least one digit character';\n\n  @Input()\n  specialCharsCriteriaMsg = 'contains at least one special character';\n\n  @Input()\n  customCharsCriteriaMsg = 'contains at least one custom character';\n\n  @Input()\n  minCharsCriteriaMsg: string;\n\n  ngOnInit(): void {\n    if (!this.minCharsCriteriaMsg) {\n      this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`\n    }\n  }\n\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\n\ntype Type = 'text' | 'password' ;\n\n@Component({\n  selector: 'mat-pass-toggle-visibility',\n  template: `\n    <button (click)=\"isVisible = !isVisible\"\n            type=\"button\"\n            tabindex=\"-1\"\n            class=\"mat-icon-button cdk-focused cdk-mouse-focused\" mat-icon-button\n            matRippleCentered=\"true\"\n            matRipple>\n      <mat-icon>{{isVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\n    </button>\n  `,\n  styles: [`\n\n  `],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MatPassToggleVisibilityComponent {\n\n  @Input()\n  isVisible: boolean;\n\n  _type: Type = 'text';\n\n  get type() {\n    return this.isVisible ? 'text' : 'password';\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MatCardModule, MatIconModule, MatProgressBarModule, MatRippleModule} from '@angular/material';\n\nimport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nimport {MatPasswordStrengthInfoComponent} from './component/mat-password-strength-info/mat-password-strength-info.component';\nimport {MatPassToggleVisibilityComponent} from './component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component';\n\n// Export module's public API\nexport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nexport {\n  MatPasswordStrengthInfoComponent\n} from './component/mat-password-strength-info/mat-password-strength-info.component';\nexport {MatPassToggleVisibilityComponent} from './component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component';\nexport {MatPasswordStrengthValidator} from './validator/mat-password-strength-validator';\n// validator\nexport {RegExpValidator} from './validator/regexp.class';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatRippleModule\n  ],\n  exports: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  declarations: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  entryComponents: [MatPassToggleVisibilityComponent]\n})\nexport class MatPasswordStrengthModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n}\n"],"names":["MatPasswordStrengthValidator","control","value","length","criteria","regex","_this","isUndefinedOrEmpty","test","failed","actualValue","requiredPattern","password","notConfirmed","passwordConfirmation","RegExpValidator","lowerCase","RegExp","upperCase","digit","specialChar","this","EventEmitter","Map","FormControl","MatPasswordStrengthComponent","setRulesAndValidators","calculatePasswordStrength","changes","externalError","firstChange","isFirstChange","currentValue","_color","Colors","previousValue","reset","Object","_strength","warnThreshold","accentThreshold","containAtLeastMinChars","min","containAtLeastOneLowerCaseLetter","criteriaMap","get","Criteria","containAtLeastOneUpperCaseLetter","containAtLeastOneDigit","containAtLeastOneSpecialChar","containAtCustomChars","customValidator","validatorsArray","passwordConfirmationFormControl","setValidators","Validators","compose","required","matPasswordStrengthValidator","confirm","push","enableLengthRule","set","max","minLength","maxLength","enableLowerCaseLetterRule","pattern","enableUpperCaseLetterRule","enableDigitRule","enableSpecialCharRule","parseCustomValidatorsRegex","forEach","key","validate","passwordFormControl","requirements","unit","size","_containAtLeastMinChars","_containAtLeastOneLowerCaseLetter","_containAtLeastOneUpperCaseLetter","_containAtLeastOneDigit","_containAtLeastOneSpecialChar","_containCustomChars","filter","v","onStrengthChanged","emit","strength","Component","selector","exportAs","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","flipIn","timing","rotateX","rotateY","params","delay","animation","style","backface-visibility","animate","keyframes","opacity","transform","offset","shake","MatPasswordStrengthInfoComponent","minCharsCriteriaMsg","passwordComponent","animations","trigger","transition","query","stagger","animateChild","height","margin","useAnimation","MatPassToggleVisibilityComponent","isVisible","encapsulation","ViewEncapsulation","None","MatPasswordStrengthModule","ngModule","providers","NgModule","imports","CommonModule","MatProgressBarModule","MatCardModule","MatIconModule","MatRippleModule","exports","declarations","entryComponents"],"mappings":"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"}